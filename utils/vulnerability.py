# 检测脆弱性, 返回约束矩阵C
import numpy as np
from CONST import *


def fragility_curve(half_wind_speed, wind_speed):
    # sigmoid 激活函数
    value = 1/(1+np.exp(wind_speed-half_wind_speed))
    return value


def vulnerability_single(wind_speed, category):
    value = 0
    if category == 'tower':
        value = 1 - fragility_curve(36, wind_speed)
    elif category == 'branch':
        value = 1 - fragility_curve(24, wind_speed)
    return value


def vulnerability_total(wind_speed, length, branch_num):
    tower_num = length//TOWER_SPAN + 1
    tower_value = 1 - (1-vulnerability_single(wind_speed, 'tower'))**tower_num
    branch_value = 1 - (1-vulnerability_single(wind_speed, 'branch'))**branch_num
    value_total = tower_value + branch_value - tower_value*branch_value
    if value_total >= VULNERABILITY_THRESHOLD:
        return 0
    else:
        return 1


def constraint_matrix(wind_speed):
    constraint_vector = np.zeros(LINE_NUM)
    for i in range(0, LINE_NUM):
        constraint_vector[i] = vulnerability_total(wind_speed, )


if __name__ == '__main__':
    print(vulnerability_total(20, 10000, 4))
